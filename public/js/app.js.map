{"version":3,"sources":["app.js","routes.js","resources.js","filters.js","controllers.js","config.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjvZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["/**\n * Vendorify Angular UI\n *  - Angular front end for the vendorify admin application\n *\n * @author Michael Roth <mr.hroth@gmail.com>\n * @version 2.0.1\n */\n\n// ---- app main ---- //\nangular.module('wc', [\n    'ngRoute', 'ngResource','ngAnimate','ui.bootstrap'\n], function($interpolateProvider) {\n    \n    // play nicely with laravel blade\n    $interpolateProvider.startSymbol('<%');\n    $interpolateProvider.endSymbol('%>');\n    \n});\n","\n// ---- run ---- //\nangular.module('wc').run([\"$rootScope\", \"$location\", \"$window\",\"$modal\",\n    function($rootScope, $location, $window, $modal){\n        \n        // user settings modal\n        $rootScope.openSettings = function(){\n            $modal.open({\n              templateUrl: 'settingsModal.html',\n              controller: 'SettingsModalCtrl',\n              backdrop: false,\n              windowTemplateUrl: 'templates/modal/window.html',\n              animation: false\n            });\n        };\n\n        // global errors\n        $rootScope.error = {};\n        $rootScope.$on('error', function(e, data){\n            console.log(data.data);\n            $rootScope.error.message = data.data.msg || data.statusText;\n            $rootScope.error.show = true;\n            $rootScope.loading = false;\n        });\n\n        $rootScope.dismissError = function(){\n            $rootScope.error.show = false;\n        };\n\n        // route events\n        $rootScope.$on(\"$routeChangeStart\", function(e, data) {\n            $rootScope.loading = true;\n        });\n\n        $rootScope.$on(\"$routeChangeSuccess\", function(e, data) {\n            $rootScope.loading = false;\n            if (data.controller) $rootScope.controller = data.controller.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n        });\n\n    }\n]);\n\n// ---- routes ---- //\nangular.module('wc').config([\"$routeProvider\",\n    function($routeProvider) {\n\n        $routeProvider.when(\"/\", {\n            templateUrl: \"/templates/vendors.html\",\n            controller: \"VendorsCtrlr\"\n        }).when(\"/vendors\", {\n            templateUrl: \"/templates/vendors.html\",\n            controller: \"VendorsCtrlr\"\n        }).when(\"/vendor/:vendorId\", {\n            templateUrl: \"/templates/vendor.html\",\n            controller: \"VendorCtrlr\"\n        }).when(\"/vendor\", {\n            templateUrl: \"/templates/vendor.html\",\n            controller: \"VendorCtrlr\"\n        }).when(\"/reports\", {\n            templateUrl: \"/templates/reports.html\",\n            controller: \"ReportsCtrlr\"\n        }).when(\"/report/:reportId\", {\n            templateUrl: \"/templates/report.html\",\n            controller: \"ReportCtrlr\"\n        }).otherwise({\n            templateUrl: \"/templates/404.html\",\n        });\n    }\n]);","\n\n// ---- resources ---- //\nvar API = '/api/';\nangular.module('wc')\n\n// Vendor\n.factory('Vendor', ['$resource', function($resource) {\n    return $resource(API+'vendor/:vendorId', {vendorId : '@id'}, {\n        'update': { method:'PUT' }\n    });\n}])\n.factory('Transaction', ['$resource', function($resource) {\n    return $resource(API+'vendor/:vendorId/transaction/:transactionId', {vendorId : '@vendorId', transactionId : '@transactionId'}, {\n        'update': { method:'PUT' }\n    });\n}])\n.factory('Report', ['$resource', function($resource) {\n    return $resource(API+'report/:reportId', {vendorId : '@id'}, {\n        'update': { method:'PUT' }\n    });\n}]);\n","angular.module('wc')\n\n.directive(\"asDate\", function(){\n  return {\n   require: 'ngModel',\n    link: function(scope, elem, attr, modelCtrl) {\n      modelCtrl.$formatters.push(function(modelValue){\n        return new Date(modelValue);\n      });\n    }\n  };\n})\n\n.filter(\"asDate\", function () {\n    return function (input) {\n        return new Date(input);\n    }\n});","\n// ---- controllers ---- //\nangular.module('wc')\n.controller('SettingsModalCtrl', function ($rootScope, $scope, $modalInstance, $http, $location) {\n  \n    // Settings modal\n    $scope.close = function () {\n        $modalInstance.dismiss();\n        delete $scope.apiKey;\n    };\n\n    // Show users api key\n    $scope.showKey = function(){\n        $rootScope.loading = true;\n        $http.get('/api/key').success(function(res){\n           $rootScope.loading = false;\n           $scope.apiKey = res.key;\n        });\n    };\n\n    // Sync google contacts (vendors)\n    $scope.sync = function(){\n        $rootScope.loading = true;\n        $http.get('/api/sync/google').success(function(res){\n            window.location.reload();\n        }).error(function(err){\n            $rootScope.loading = false;\n            console.log(err);\n\n            // redirect to signin\n            window.location = '/oauth/google';\n        });\n    };\n\n    // Sync google contacts (vendors)\n    $scope.disconnect = function(){\n        $rootScope.loading = true;\n        $http.get('/api/disconnect/google').success(function(res){\n            window.location.reload();\n        });\n    };\n\n})\n.controller('ReportModalCtrl', function ($rootScope, $scope, $modalInstance, $http, $location) {\n    $scope.start = new Date();\n    $scope.end = new Date();\n    $scope.rent = false;\n    $scope.success = '';\n    $scope.warning = false;\n\n    // Settings modal\n    $scope.close = function () {\n        $modalInstance.dismiss();\n        $scope.success = '';\n    };\n\n    // Check report timeframe\n    $scope.check = function(){\n        var s = $scope.start.getTime()/1000;\n        var e = $scope.end.getTime()/1000;\n        var max = 86400*60; // 60 days\n        if((e-s) > max) {\n            $scope.warning = true;\n        } else {\n            $scope.warning = false;\n        }\n    };\n\n    // Generate a report\n    $scope.generate = function() {\n\n        $rootScope.loading = true;\n        $http.post('/api/generate/report', {\n            start : $scope.start,\n            end : $scope.end,\n            rent : $scope.rent\n        }).success(function(res){\n           $rootScope.loading = false;\n           $rootScope.$emit('new-report', res);\n           $scope.success = 'Report ID '+ res.report.id +' successfully generated.';\n        });\n\n    };\n\n})\n.controller('SendReportModalCtrl', function ($rootScope, $scope, $modalInstance, vendorIdx) {\n    \n    $scope.send = function(){\n        $rootScope.$emit('sendReport',{\n            vendorIdx : vendorIdx,\n            message : $scope.message,\n            cc : $scope.cc\n        });\n        $modalInstance.close();\n    };\n\n})\n.controller(\"VendorsCtrlr\", [\"$rootScope\", \"$scope\", \"$routeParams\",\"$location\",\"Vendor\",\n    function($rootScope, $scope, $routeParams, $location, Vendor) {\n        $rootScope.loading = true;\n\n        // TODO sorting / filtering / pagination?\n        $scope.vendors = Vendor.query(function(){\n            $rootScope.loading = false;\n        });\n\n        // show a vendor\n        $scope.showVendor = function(id) {\n            $location.path('/vendor/'+id);\n        };\n\n    }\n\n])\n.controller(\"VendorCtrlr\", [\"$q\", \"$rootScope\", \"$scope\", \"$routeParams\", \"$location\", \"Vendor\", \"Transaction\",\n    function($q, $rootScope, $scope, $routeParams, $location, Vendor, Transaction) {\n        $rootScope.loading = true;\n        $scope.showEdit = false;\n\n        // get vendor\n        if($routeParams.vendorId) {\n            $scope.vendor = Vendor.get({vendorId:$routeParams.vendorId}, function(){\n                $rootScope.loading = false;\n            });\n        } else {\n            $scope.vendor = {\n                status : 'pending',\n                codes : [],\n                transactions : []\n            };\n            $scope.showEdit = true;\n            $rootScope.loading = false;\n        }\n\n        // codes\n        $scope.code = '';\n        $scope.removeCode = function(idx){\n            $scope.vendor.codes.splice(idx,1);\n        };\n        $scope.addCode = function(){\n            if(!$scope.code) return;\n            $scope.vendor.codes.push({\n                vendor_id : $scope.vendor.id,\n                name : $scope.code\n            });\n            $scope.code = '';\n        };\n\n        // delete vendor\n        $scope.delete = function(){\n            if(!confirm('Are you sure you want to delete this vendor?')) return false;\n\n            $rootScope.loading = true;\n            $scope.vendor.$remove(function(res){\n                $rootScope.loading = false;\n                $location.path('/vendors');\n            });\n        };\n\n        // save vendor\n        $scope.save = function(){\n            $rootScope.loading = true;\n\n            if($scope.vendor.id) {\n                $scope.vendor.$update(function(vendor){\n                    $rootScope.loading = false;\n                    $scope.showEdit = false;\n                });\n            } else {\n                Vendor.save($scope.vendor, function(vendor){\n                    $rootScope.loading = false;\n                    $scope.showEdit = false;\n                    $scope.vendor = vendor;\n                });\n            }\n\n        };\n\n        // new transaction\n        $scope.newTransaction = function(){\n\n            var date = new Date();\n            date.setDate(date.getDate() - 1);\n\n            $scope.vendor.transactions.unshift({\n                vendor_id : $scope.vendor.id,\n                payment_id : 0,\n                code : $scope.vendor.codes[0].name || '',\n                quantity : 1,\n                gross : 0,\n                net : 0,\n                discounts : 0,\n                custom : 1,\n                processed_at : date,\n                edit : true\n            });\n\n        };\n\n        // save a transaction\n        $scope.saveTransaction = function(idx){\n            $rootScope.loading = true;\n            var transaction = $scope.vendor.transactions[idx];\n            delete transaction.edit;\n\n            if(transaction.id) {\n                // update tx\n                Transaction.update({vendorId: $scope.vendor.id, transactionId: transaction.id}, transaction, function(res){\n                    $rootScope.loading = false;\n                    if(res.transaction.vendor_id != $scope.vendor.id) {\n                        $scope.vendor.transactions.splice(idx, 1);\n                    } else {\n                        $scope.vendor.transactions[idx] = res.transaction;\n                    }\n                });\n            } else {\n                // create tx\n                transaction.custom = 1;\n                transaction.gross = transaction.net;\n                Transaction.save({vendorId: $scope.vendor.id}, transaction, function(res){\n                    $rootScope.loading = false;\n                    $scope.vendor.transactions[idx] = res.transaction;\n                });\n            }\n            \n        };\n\n        // delete a transaction\n        $scope.deleteTransaction = function(idx){\n            $rootScope.loading = true;\n            var transaction = $scope.vendor.transactions[idx];\n            \n            if(!transaction.custom) return false;\n            if(transaction.id) {\n                if(!confirm('Are you sure?')) return false;\n            }\n\n            if(transaction.id) {\n                Transaction.remove({vendorId: $scope.vendor.id, transactionId : transaction.id}, function(){\n                    $rootScope.loading = false;\n                    $scope.vendor.transactions.splice(idx, 1);\n                });\n            } else {\n                $scope.vendor.transactions.splice(idx, 1);\n            }\n\n        };\n\n        // sort transactions\n        $scope.transactionDate = new Date();\n        $scope.transactionSort = function(){\n            $rootScope.loading = true;\n            \n            var date = $scope.transactionDate ? Math.floor($scope.transactionDate.getTime()/1000) : null;\n            var req = {\n                vendorId: $scope.vendor.id\n            };\n            if(date) { req.date = date; }\n            $scope.vendor.transactions = Transaction.query(req, function(res){\n                $rootScope.loading = false;\n            });\n        };\n\n    }\n])\n.controller(\"ReportsCtrlr\", [\"$q\", \"$rootScope\", \"$scope\", \"$routeParams\",\"$location\",\"$modal\",\"Report\",\n    function($q, $rootScope, $scope, $routeParams,$location,$modal,Report) {\n        $rootScope.loading = true;\n        $scope.reports = [];\n\n        $scope.reports = Report.query(function(res){\n            $rootScope.loading = false;\n        });\n\n        // generate report modal\n        $scope.openModal = function(){\n            $modal.open({\n              templateUrl: 'templates/modal/reportModal.html',\n              controller: 'ReportModalCtrl',\n              backdrop: false,\n              windowTemplateUrl: 'templates/modal/window.html',\n              animation: false\n            });\n        };\n\n        // report created\n        var reportUnbind = $rootScope.$on('new-report', function(e, res){\n            var report = res.report;\n            //report.data = JSON.parse(report.data); \n            $scope.reports.unshift(report);\n        });\n\n        // view report\n        $scope.view = function(id) {\n            $location.path('/report/'+id);\n        };\n\n        // cleanup scope events\n        $scope.$on('$destroy', function(){\n            reportUnbind();\n        });\n    }\n])\n.controller(\"ReportCtrlr\", [\"$q\", \"$rootScope\", \"$scope\", \"$routeParams\",\"$http\",\"$modal\",\"$location\",\"Report\",\n    function($q,$rootScope,$scope,$routeParams,$http,$modal,$location,Report) {\n        $rootScope.loading = true;\n        $scope.tab = 'vendor';\n\n        $scope.report = Report.get({reportId:$routeParams.reportId}, function(report){\n            $rootScope.loading = false;\n        });\n\n        $scope.collapse = function(){\n\n            $scope.report.data.vendors.forEach(function(vendor, i){\n                if($scope.collapsed) {\n                    $scope.report.data.vendors[i].collapsed = false;\n                } else {\n                    $scope.report.data.vendors[i].collapsed = true;\n                }\n            });\n\n        };\n\n        $scope.save = function(){\n            $rootScope.loading = true;\n\n            Report.update(\n                {reportId:$scope.report.id},\n                {message: $scope.report.message}, \n                function(report){\n                    $rootScope.loading = false;\n            });\n        };\n\n         // delete report\n        $scope.delete = function(){\n            if(!confirm('Are you sure you want to delete this report?')) return false;\n\n            $rootScope.loading = true;\n            Report.remove({reportId : $scope.report.id}, function(res){\n                $rootScope.loading = false;\n                $location.path('/reports');\n            });\n        };\n\n        // generate report modal\n        $scope.openModal = function(vendorIdx){\n            $modal.open({\n              templateUrl: 'templates/modal/sendReportModal.html',\n              controller: 'SendReportModalCtrl',\n              backdrop: false,\n              windowTemplateUrl: 'templates/modal/window.html',\n              animation: false,\n              resolve : {\n                vendorIdx : function(){\n                    return vendorIdx;\n                }\n              }\n            });\n        };\n\n        // send report\n        $scope.send = function(e, data) {\n\n            // confirm!\n            if($rootScope.loading || !confirm('Are you sure? Report(s) will send immediately!')) {\n                return false;\n            }\n\n            // loading indicators\n            $rootScope.loading = true;\n            if(data !== undefined) {\n                $scope.report.data.vendors[data.vendorIdx].loading = true;\n            } else {\n                $scope.report.loading = true;\n            }\n\n            // do send request\n            $http.post('/api/send/report', {\n                reportId : $scope.report.id,\n                vendorId : (data!==undefined) ? $scope.report.data.vendors[data.vendorIdx].vendor.id : null,\n                message : (data!==undefined) ? data.message : $scope.report.message,\n                cc : (data!==undefined) ? data.cc : false\n            }).success(function(res){\n               $rootScope.loading = false;\n               angular.element(e.target).remove();\n\n               if(data !== undefined) {\n                    delete $scope.report.data.vendors[data.vendorIdx].loading;\n                    $scope.report.data.vendors[data.vendorIdx].sent = true;\n                } else {\n                    delete $scope.report.loading;\n                }\n\n            });\n        };\n\n        // send report on event\n        var reportUnbind = $rootScope.$on('sendReport', $scope.send);\n\n        // cleanup scope events\n        $scope.$on('$destroy', function(){\n            reportUnbind();\n        });\n\n    }\n]);","\n// ---- config ---- //\nangular.module('wc').config([\"$httpProvider\", function($httpProvider, $rootScope) {\n\n     // ajax global error handler\n    $httpProvider.interceptors.push(\n        function($q, $rootScope) { \n            return {\n                'responseError': function(rejection) {\n                   $rootScope.$emit('error', rejection);\n                   return $q.reject(rejection);\n                }\n            };\n        });\n\n}]);"],"sourceRoot":"/source/"}